定义：
动态的给对象添加一些额外的职责，就增加功能来说，装饰者模式比起生成子类更加灵活！


四个角色：
	1、Component：抽象组件，可以是接口或抽象类，具体组件与抽象装饰类的共同父类，声明了在具体组件中实现的业务方法，
	可以使客户端以一致的方式处理未修饰对象与修饰后的对象，实现了客户端的透明操作，比如这里的Tea类。
	
	2、ConcreteComponent：具体组件，实现抽象组件中生命的方法，装饰器类可以给他增加额外的责任(方法)，比如这里的MilkTea和LemonTea。
	
	3、Decorator：抽象装饰类，装饰组件对象的，内部一定要有一个指向组件对象的引用！！！通过该引用可以调用装饰前构建对象的方法，
	并通过其子类扩展该方法，已达到装饰的目的，比如这里的Decorator类。
	
	4、ConcreteDecorator：具体装饰类，抽象装饰类的具体实现，可以调用抽象装饰类中定义的方法，也可以新增新的方法来扩充对象的行为。


适用场景
装饰者模式是以对客户端透明的方式扩展对象的功能，是继承关系的一种替代方案！

以下情况可以考虑是想用对象组合（组合与委托）：
	1、在不影响其他对象的情况下,以动态、透明的方式给单个对象添加职责；
	
	2、处理那些可以撤消的职责；
	
	3、当不能采用生成子类的方法进行扩充时：一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。
	另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类；



优缺点
	1、扩展对象功能，比继承灵活，不会导致类个数急剧增加；
	
	2、可以通过一种动态的方式在运行时选择不同的具体装饰类，从而实现不同的行为；
	
	3、避免了高层次类有太多的特征，可以从一个最简单的类慢慢给他添加功能；
	
	4、会产生很多小装饰者对象，会影响性能，过多使用该模式也会使程序变得复杂。