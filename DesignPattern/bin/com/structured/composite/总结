定义：
组合模式，又称为 部分整体模式，把具有相似的一组对象当做一个对象处理，用一种树状的结构来组合对象，
再提供统一的方法去访问相似的对象，以此忽略掉对象与对象容器间的差别。


三个角色
上面也说了合并模式是用一种树状的结构来组合对象，三个名词 根节点，枝结点，叶子结点，
类比上面那个菜单的图，根节点是菜单，枝结点是饮料菜单和小吃菜单，叶子结点是奶茶，果汁，手抓饼和鱼蛋！

1、Component：抽象组件，为组合中的对象声明接口，让客户端可以通过这个接口来访问和管理整个对象结构，
可以在里面为定义的功能提供缺省的实现，比如上面的AbstractMenu类。

2、Composite：容器组件，继承抽象组件，实现抽象组件中与叶子组件相关的操作，比如上面的Menu类重写了get，set方法。

3、Leaf：叶子组件，定义和实现叶子对象的行为，不再包含其它的子节点对象，比如上面的MilkTea，Juice，HandCake，FishBall。


使用了合并模式，如果此时我们要新增一个菜品，只需继承抽象构建类，无需改动其他类，显得更加方便。


适用情景
	1、如果你想表示对象的部分-整体层次结构，可以选用组合模式，把整体和部分的操作统一起来，使得层次结构实现更简单，从外部来使用这个层次结构也简单；
	2、如果你希望统一的使用组合结构中的所有对象，可以选用组合模式，这正是组合模式提供的主要功能；

优缺点
优点：
	让客户端更加简单，客户端不需要再操心面对的是组合对象还是叶节点对象，所以不需要写一大堆if语句来保证他们对正确的对象调用了正确的方法。
	通常，他们只需要对整个结构调用一个方法并执行操作就可以了。

缺点：
	容易增加新的组件也会带来一些问题，比如很难限制组合中的组件类型。这在需要检测组件类型的时候，使得我们不能依靠编译期的类型约束来完成，必须在运行期间动态检测。
