应用场景
将    复杂对象的构建   与     它的表示    分离开来，使得同样的构建过程可以 创建不同的表示。
举个简单例子：自定义游戏角色时，游戏角色由： 
性别，脸部，衣服三个部分组成，我们根据自己的喜好进行选择， 
最终胜出一个自定义的角色，不同的组成部分，最后生成的角色也不一样。



组成部分(四个角色)
Product —— 产品类(就是我们这里的computer实体类)
Builder —— 抽象的Builder类，规范产品的组建，一般由子类实现具体过程(就是我们这里的Builder接口)
ConcreteBuilder —— Builder的实现类，实现Builder类中定义方法，并返回组建好的对象(就是我们这里的LenovoBuilder,HuaweiBuilder)
Director —— 统一组装过程(现实开发中，一般被省略，直接使用一个Builder来进行对象的组装)



我们这里的案例过程：
1、客户说要一台联想电脑
Builder builder = new LenovoBuilder();
2、组装人员接到任务，需要组装一台联想电脑
Director d = new Director(builder);
3、开始组装电脑
d.construct();
4、组装好了一台电脑
Computer c = builder.retrieveResult();
5、输出：联想主机
System.out.println(c.getHost());



优点：
1、简化复杂对象构建，对象本身与创建过程解耦，无需知道具体的内部实现细节，相同的创建过程可以创建不同的产品对象；

缺点：
1、可能会产生多余的建造者和构建过程对象，消耗内存；
2、不适用与内部建造顺序不稳定，变化复杂的对象，可能导致需要创建很多具体建造者来实现这些变化。


