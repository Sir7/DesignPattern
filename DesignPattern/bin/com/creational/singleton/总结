在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。

这样的模式有几个好处：
1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。
2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。
3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。
（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。


单例模式有三个特性：
	单例类只能有一个实例
	单例类必须自行创建自己的唯一的实例
	单例类必须给所有其他对象提供这一实例

通过单例模式的学习告诉我们：
1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。
2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。


设计思想：(保证对象的唯一性的三个步骤)
		想法										实现
	不允许其他程序用new对象						私有化该类的构造函数
	在该类中创建对象								通过new在本类中创建一个本类对象
	对外提供一个可以让其他程序获取该对象的方法			定义一个公有的方法，将在该类中所创建的对象返回	


应用场景：
当需要保证类在内存中的对象唯一性，可以使用单例模式，不想创建多个实例浪费资源，或者避免多个实例由于多次调用而出现错误。
一般写工具类，线程池，缓存，数据库等可以用到。
	
	
优缺点
优点：
	保持类对象唯一性，对于频繁创建和销毁的对象可以提高性能。 
	
缺点：
	扩展困难，单例的方法无法生成子类对象，要扩展的话基本要重写这个类。	