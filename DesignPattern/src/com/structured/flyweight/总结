享元模式
定义
	运用共享技术有效的支持大量细粒度的对象。


享元模式实现扑克牌程序
抽取下牌共有的属性是：花色和大小，花色固定四种，不同是大小，这里涉及到享元模式的内部状态和外部状态。


内部状态与外部状态
	内部状态：固定不变可共享的的部分，存储在享元对象内部，比如这里的花色。 
	外部状态：可变不可共享的部分，一般由客户端传入享元对象内部，比如这里的大小。
	
	
三个角色
	1、Flyweight：享元对象的抽象父类或者接口，通过这个接口，享元对象可以接受并作用于外部状态；
	
	2、ConcreteFlyweight：具体享元实现对象，继承或实现Flyweight并为内部状态增加存储空间。
	
	3、FlyweightFactory：享元工厂，创建并管理共享的享元对象，并对外提供访问共享享元对象的接口。
	

使用场景
	1.系统有大量相同或者相似的对象，消耗大量内存
	
	2.需要缓冲池


优缺点
优点：
	大大减少对象的创建，降低系统的内存，使效率提高
	
缺点：
	使得系统变得复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。

	
	
场景引入
有时在开发中，可能我们需要创建大量的相同的重复对象，比如游戏开发中，
场景贴图的，一个森林的场景，要有有成千上万的树，如果为每棵树都实例化 
不同的模型，估计会把你电脑给炸了。使用享元模式可以解决这个问题， 
抽取出所有树对象的共有属性，并转移到一个单独的类中，然后只需要 
一个示例就可以了，然后森林里的每棵树对这个实例做一次引用。