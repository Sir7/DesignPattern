定义：
桥接模式：基于单一职责原则，如果系统中的类存在多个变化的维度，通过该模式可以将这几个维度分离出来， 
然后进行独立扩展。这些分离开来的维度，通过在抽象层持有其他维度的引用来进行关联，就好像在两个维度间搭了桥一样，所以叫桥接模式。


四个角色
	1、Abstraction：抽象部分的接口。通常在这个对象里面，要维护一个实现部分的对象引用，在抽象对象里面的方法，需要调用实现部分的对象来完成。 
	这个对象里面的方法，通常都是跟具体的业务相关的方法。
	
	2、Refined Abstraction：扩展抽象部分的接口，通常在这些对象里面，定义跟实际业务相关的方法，
	这些方法的实现通常会使用Abstraction中定义的方法，也可能需要调用实现部分的对象来完成。
	
	3、Implementor：定义实现部分的接口，这个接口不用和Abstraction里面的方法一致，通常是由Implementor接口提供基本的操作，
	而Abstraction里面定义的是基于这些基本操作的业务方法，也就是说Abstraction定义了基于这些基本操作的较高层次的操作。
	
	4、ConcreteImplementor：真正实现Implementor接口的对象。
	
	
优缺点
优点：
	1、实现了抽象和实现部分的分离，更好的可扩展性，动态切换实现
	
	2、很多情况下桥接模式可以替代多层继承方案，极大减少子类个数！

缺点：
	1、增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。
	
	2、要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性，如何正确识别两个独立维度也需要一定的经验积累。
	
	
适用场景
	1、多维变化类或者多个树状图间的耦合； 
	2、想为构建的抽象与具体化提供更多灵活性，避免两层次间建立静态的继承联系； 
	3、不希望使用继承或因多层继承导致系统类个急剧增加的额系统； 
	4、一个类存在两个或多个独立变化的维度，而且都需要独立进行扩展。