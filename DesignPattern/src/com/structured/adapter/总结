定义：
适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。
适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。

两种适配器模式：
根据适配器类与适配者类的关系不同，适配器模式可分为    类适配器   和    对象适配器     两种，尽管都是三个角色，但还是有些差别的！ 
另外，类适配器的适配器和适配者是     继承     关系，而对象适配器则是      引用      关系。


本案例是实现将英语翻译成中文的功能，中文是目标接口，英语是需要转换的数据(也就是需要适配的类)，那么中间就需要一个翻译器(适配器)。


类适配器的三个角色：
	1、目标接口(Target)：客户所期待的接口，目标是接口；(案例中的Chinese接口)
	2、需要适配的类(Adaptee)：需要适配的类或适配者类；(案例中的English)
	3、适配器(Adapter)：实现了抽象目标类接口Target，并继承了适配者类Adaptee(案例中的ClassTranslator类)


对象适配器的三个角色：(用的较多)
	1、目标接口(Target)：客户所期待的接口，可以是具体的或抽象的类，也可以是接口(案例中的Chinese接口)
	2、需要适配的类(Adaptee)：需要适配的类或适配者类；(案例中的English类)
	3、适配器(Adapter)：通过包装一个需要适配的对象，把原接口转换成目标接口；(案例中的Translator类)

	
	
优点：
	1、将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。
	
	2、增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性， 
	
	3、同一个适配者类可以在多个不同的系统中复用。灵活性和扩展性都非常好，可以很方便地更换适配器。
	
	4、一个对象适配器可以把多个不同的适配者适配到同一个目标。

缺点：
	1、类适配器模式对于不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者。
	
	2、适配者类不能为最终类，如在Java中不能为final类。
	
	3、在Java中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性。
	
	4、对象适配器要在适配器中置换适配者类的某些方法比较麻烦。