工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，
所以，从设计角度考虑，有一定的问题，如何解决？
就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，
直接增加新的工厂类就可以了，不需要修改之前的代码。


四个角色组成：
	1、抽象工厂：声明一组用于创建产品族的方法，每个方法对应一种产品；(案例中的Player接口)
	
	2、具体工厂：实现抽象工厂创建产品的方法，生成具体产品；(案例中的MusicPlayerFactory/VideoPlayerFactory)
	
	3、抽象产品：为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法；(案例中的Provider)
	
	4、具体产品：抽象产品的具体化，实现抽象产品的相关方法；(案例中的MusicPlayer/VideoPlayer)


使用场景
	创建的对象有    多个相互关联或依赖的产品族


优缺点
优点
	1.隔离具体类的生成，客户端无需知道怎么被创建，接口与实现分离
	
	2.增加新的产品族很方便，无须修改已有系统，符合”开闭原则”

缺点：
	1.类文件增加
	
	2.扩展新的产品等级结构麻烦，需要修改抽象工厂，实现抽象工厂的具体工厂类都要更改！



抽象工厂模式有点：对代码的拓展更好！！！



如果我还想创建一个图片ImgPlayer，那么我只要
1、创建一个ImgPlayer实体类，实现Player
2、创建一个ImgPlayerFactory,实现Provider接口
这样在不打破其他MusicPlayer和VideoPlayer功能的同时，又实现了ImgPlayer功能的实现！