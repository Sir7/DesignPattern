工厂模式也分很多种：简单的工厂模式、多工厂模式、静态工厂模式！

适用场景：
1、简单工厂模式：
	1)工厂类负责创建的对象比较少；
	2)客户只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心；

2、工厂方法模式：
	1)复杂对象生成；
	2)当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂来组装；

优缺点：
1、简单工厂模式：
	1)工厂类负责所有对象的创建逻辑，该类出问题整个系统挂掉；
	2)系统扩展困难，一旦添加新产品就不得不修改工厂逻辑；
	3)简单工厂模式由于使用了静态工厂方法，所以工厂角色无法形成基于继承的等级结构；

2、工厂方法模式：
	1)在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度， 有更多的类需要编译和运行，会给系统带来一些额外的开销。
	2)由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度。




工厂模式适合      “凡是出现了大量的产品需要创建，并且具有共同的接口时”  ，可以通过工厂方法模式进行创建。
在以上的三种模式中：
简单工厂模式如果传入的字符串有误，不能正确创建对象，静态工厂模式相对于多工厂模式，不需要实例化工厂类，
所以，大多数情况下，我们会选用——静态工厂方法模式。


工厂方法模式的弊端是：扩展性差！
 如果要想再做一个ImgPlayer的扩展功能，那么就需要打破原有的PlayerFactory代码，
 就是需要再添加 获取Imgplayer的produce方法。破坏了工厂的代码环境，是不利的！！！
