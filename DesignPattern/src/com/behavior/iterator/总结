迭代模式

定义
	提供一种方法顺序访问一个容器（container）对象中的各个元素，而又不暴露该对象的内部细节。

	
四个角色：
	1、Iterator：迭代器角色，定义访问和遍历元素的接口；
	
	2、ConcreteIterator：具体迭代器角色，实现接口中的方法，并且记录遍历的当前位置；
	
	3、Container：容器角色，提供创建具体迭代器角色的接口；
	
	4、ConcreteContainer：具体容器角色，具体迭代器角色与容器相关联。
	
	
使用场景
	1.访问一个聚合对象的内容而无须暴露它的内部表示。
	
	2.需要为聚合对象提供多种遍历方式。
	
	3.为遍历不同的聚合结构提供一个统一的接口。
PS：由于容器与迭代器的关系太密切了，所以大多数语言在实现容器的时候都给提供了迭代器，
并且这些语言提供的容器和迭代器在绝大多数情况下就可以满足我们的需要， 
所以现在需要我们自己去实践迭代器模式的场景还是比较少见的，我们只需要使用语言中已有的容器和迭代器就可以了。


优缺点
优点：
1.更好的封装性，访问一个聚合对象的内容，无需暴露容器内部表示。

2.可以用不同的遍历方式来遍历一个集合。

3.简化容器类的接口，有了迭代器的接口，那么聚合本身就不需要再定义这些接口

4.简化客户端调用

缺点：
	1.将存储数据和遍历数据的职责分离，增加新的容器类需要增加对应的迭代器类，从而会导致类文件数目的增加。
	
	2.对于比较简单的遍历，使用迭代器模式显得较为繁琐，比如ArrayList直接就可以用for循环+get方法来遍历
	
	3.抽象迭代器的设计难度较大，需要充分考虑到系统将来的扩展，例如JDK内置迭代器Iterator就无法实现逆向遍历，
	如果需要实现逆向遍历，只能通过其子类ListIterator等来实现，而ListIterator迭代器无法用于操作Set类型的聚合对象。 
	在自定义迭代器时，创建一个考虑全面的抽象迭代器并不是件很容易的事情。
