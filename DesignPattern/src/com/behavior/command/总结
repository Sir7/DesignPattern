命令模式

定义：
	将一个请求封装成一个对象，从而是你可用不同的请求对客户端参数化，对请求排队或记录请求日志，以及支持可撤销的操作。
	
	
四个角色：
	1、Command：命令，声明具体命令的抽象接口。
	
	2、ConcreteCommand：具体命令，接收者对象绑定与一个动作。
	
	3、Receiver：接收者，执行与请求相关的操作，具体实现对请求的业务处理。
	
	4、Invoker：调用者，负责调用命令对象执行请求，相关的方法叫做行动方法。
	
	
适用场景
	1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。
	请求调用者无须知道接收者的存在，也无须知道接收者是谁，接收者也无须关心何时被调用。
	
	2.系统需要在不同的时间指定请求和执行请求。一个命令对象和请求的初始调用者可以有不同的生命期，
	换言之，最初的请求发出者可能已经不在了，而命令对象本身仍然是活动的，
	可以通过该命令对象去调用请求接收者，而无须关心请求调用者的存在性，可以通过请求日志文件等机制来具体实现。
	
	3.系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。
	
	4.系统需要将一组操作组合在一起形成宏命令。
	
	
优缺点
优点：
	1.更松散的耦合，请求者无需知道执行者是谁，如何执行指令。
	
	2.更动态的控制，将请求封装，可以动态进行参数化，队列化，日志化等操作。
	
	3.命令可以复合，即一个命令可以由多个命令组合而成，又叫宏命令。
	
	4.更好的扩展性，因为命令发起者与执行者解耦，扩展新命令，只需实现新的命令对象，
	在需要的时候把具体的实现对象传入到命令对象中，就可以使用这个命令对象了，已有的实现完全不用变化。
	
	5.为请求的撤销(Undo)和恢复(Redo)操作提供了一种设计和实现方案。

缺点：
	使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接收者的调用操作都需要设计一个具体命令类，
	因此在某些系统中可能需要提供大量的具体命令类，这将影响命令模式的使用。