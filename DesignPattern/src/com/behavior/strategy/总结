策略模式

定义
	定义一系列算法，将每一个算法封装起来，并让它们可以相互替换；策略模式让算法独立于使用它的客户而变化


三个角色
	1、Context: 上下文环境类，持有抽象策略角色的引用
	
	2、Strategy: 抽象策略类，定义一系列抽象的算法策略(案例中的Compute类)
	
	3、ConcreteStrategy: 具体策略类，实现具体的算法策略(案例中的Add、Sub、Mul、Div类)
	
	
应用场景
	1.一个系统需要动态地在几种算法中选择一种的情况
	
	2.系统里面有许多类，它们之间的区别仅在于它们的行为，使用策略模式可以动态地让一个对象在许多行为中选择一种行为
	
	3.一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重条件选择语句来实现。
	此时，使用策略模式，把这些行为转移到相应的具体策略类里面，就可以避免使用难以维护的多重条件选择语句。
	
	4.不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法与相关的数据结构，可以提高算法的保密性与安全性。
	
	
优缺点
优点：
	1、定义一系列算法实现，实现让这些算法可相互替换
	
	2、避免多重条件语句
	
	3、更好的扩展性

缺点：
	1、调用者必须了解每种策略的不同，自行选择使用哪个策略
	
	2、增加了对象数目，可使用享元模式在一定程度上减少对象数量
	
	3、只适合扁平的算法结构，在一个策略接口下，运行时只有一个算法被使用，这样就限制了算法的使用层级，使用时不能嵌套调用